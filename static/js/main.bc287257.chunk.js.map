{"version":3,"sources":["LogicComponents/Stock.js","LogicComponents/Portfolio.js","UI/StockItem.js","UI/StockList.js","UI/PortfolioManager.js","UI/PortfolioListItem.js","UI/PortfolioList.js","UI/Main.js","UI/App.js","serviceWorker.js","index.js"],"names":["baseAPILink","Stock","symbol","shares","growth","stockObj","arguments","length","undefined","Object","classCallCheck","this","ticker","numShares","companyName","latestTime","primaryExchange","latestPrice","PERatio","week52High","week52Low","ytdChange","closePrice","openPrice","beta","dividendRate","dividendYield","latestEPS","latestEPSDate","investmentAmount","weightedBeta","portionOfPortfolio","expectedGrowthReturn","expectedRecessionReturn","expectedReturn","createStockFromObject","object","axios","get","buildLink","then","response","quote","data","_this","setBasicStats","stats","setStockInfo","type","peRatio","close","open","portion","totalPortfolioValue","Portfolio","title","comments","stockList","totalValue","lastModified","Date","now","id","expectedAnnualReturn","createPortfolioFromObject","numshares","stock","keys","fetchStockInfo","analyzePortfolio","_i2","analyzeStock","updatePortfolioReturn","_i3","name","comment","StockItem","_ref","removeStock","react_default","a","createElement","className","Number","parseFloat","toPrecision","onClick","StockList","stockIds","map","stockId","UI_StockItem","key","PortfolioManager","props","possibleConstructorReturn","getPrototypeOf","call","handleTitleChanges","ev","portfolio","state","setName","target","value","setState","savePortfolio","handleEditorChanges","editorValue","setComments","toString","editPortfolio","editViewHidden","viewStocksHidden","viewPortfolio","lessStock","find","updatePortfolio","RichTextEditor","createEmptyValue","prevProps","currentPortfolio","totalInvestment","createValueFromString","preventDefault","document","getElementById","toUpperCase","addStock","reset","rawPortfolio","setCurrentPortfolio","_this2","placeholder","onChange","required","react_rte_default","onSubmit","handleStockSubmit","bind","step","UI_StockList","fetchStocks","Component","PortfolioItem","removePortfolio","dangerouslySetInnerHTML","__html","PortfolioList","portfolios","portfolioIds","portfolioId","PortfolioListItem","console","log","asyncToGenerator","regenerator_default","mark","_callee","i","wrap","_context","prev","next","t0","t1","done","stop","Main","UI_PortfolioList","UI_PortfolioManager","App","createPortfolioObjects","loadedPortfolioObj","loadedPortfolioList","portfolioKeys","_i","portfolioObj","createStockObjects","portfolioObject","stockKeys","includes","saveToLocalStorage","localStorage","setItem","JSON","stringify","lessPortfolios","ls","getItem","parse","actions","UI_Main","assign","Boolean","window","location","hostname","match","ReactDOM","render","UI_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wZAEMA,EAAc,wCAiBCC,aAEjB,SAAAA,EAAYC,EAAQC,EAAQC,GAAyB,IAAjBC,EAAiBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAAMG,OAAAC,EAAA,EAAAD,CAAAE,KAAAV,GACjDU,KAAKC,OAASV,EACdS,KAAKE,UAAYV,EACjBQ,KAAKP,OAASA,EACdO,KAAKG,YAAc,GACnBH,KAAKI,WAAa,KAClBJ,KAAKK,gBAAkB,KACvBL,KAAKM,YAAc,KACnBN,KAAKO,QAAU,KACfP,KAAKQ,WAAa,KAClBR,KAAKS,UAAY,KACjBT,KAAKU,UAAY,KACjBV,KAAKW,WAAa,KAClBX,KAAKY,UAAY,KACjBZ,KAAKa,KAAO,KACZb,KAAKc,aAAe,KACpBd,KAAKe,cAAgB,KACrBf,KAAKgB,UAAY,KACjBhB,KAAKiB,cAAgB,KACrBjB,KAAKkB,iBAAmB,KACxBlB,KAAKmB,aAAe,KACpBnB,KAAKoB,mBAAqB,KAC1BpB,KAAKqB,qBAAuB,EAC5BrB,KAAKsB,wBAA0B,EAC/BtB,KAAKuB,eAAiB,EAEtBvB,KAAKwB,sBAAsB9B,qEAGT+B,GACH,OAAXA,IAEAzB,KAAKG,YAAcsB,EAAOtB,YAC1BH,KAAKI,WAAaqB,EAAOrB,WACzBJ,KAAKK,gBAAkBoB,EAAOpB,gBAC9BL,KAAKM,YAAcmB,EAAOnB,YAC1BN,KAAKO,QAAUkB,EAAOlB,QACtBP,KAAKQ,WAAaiB,EAAOjB,WACzBR,KAAKS,UAAYgB,EAAOhB,UACxBT,KAAKU,UAAYe,EAAOf,UACxBV,KAAKW,WAAac,EAAOd,WACzBX,KAAKY,UAAYa,EAAOb,UACxBZ,KAAKa,KAAOY,EAAOZ,KACnBb,KAAKc,aAAeW,EAAOX,aAC3Bd,KAAKe,cAAgBU,EAAOV,cAC5Bf,KAAKgB,UAAYS,EAAOT,UACxBhB,KAAKiB,cAAgBQ,EAAOR,cAC5BjB,KAAKkB,iBAAmBO,EAAOP,iBAC/BlB,KAAKmB,aAAeM,EAAON,aAC3BnB,KAAKoB,mBAAqBK,EAAOL,mBACjCpB,KAAKqB,qBAAuBI,EAAOJ,qBACnCrB,KAAKsB,wBAA0BG,EAAOH,wBACtCtB,KAAKuB,eAAiBE,EAAOF,4LAO3BG,IAAMC,IAAI3B,KAAK4B,UAAU,QAAS5B,KAAKC,SACxC4B,KAAK,SAAAC,GACF,IAAMC,EAAQD,EAASE,KAAKD,MAC5BE,EAAKC,cAAcH,4BAErBL,IAAMC,IAAI3B,KAAK4B,UAAU,QAAS5B,KAAKC,SACxC4B,KAAK,SAAAC,GACF,IAAMK,EAAQL,EAASE,KACvBC,EAAKG,aAAaD,yIAIpBE,EAAMpC,GACZ,MAAa,UAAToC,EACOhD,EAAcY,EA3Ff,qBA6FQ,UAAToC,EACEhD,EAAcY,EA7FV,cA4FV,wCAIK8B,GACV/B,KAAKG,YAAc4B,EAAM5B,YACzBH,KAAKI,WAAa2B,EAAM3B,WACxBJ,KAAKK,gBAAkB0B,EAAM1B,gBAC7BL,KAAKM,YAAcyB,EAAMzB,YACzBN,KAAKO,QAAUwB,EAAMO,QACrBtC,KAAKQ,WAAauB,EAAMvB,WACxBR,KAAKS,UAAYsB,EAAMtB,UACvBT,KAAKU,UAAYqB,EAAMrB,UACvBV,KAAKW,WAAaoB,EAAMQ,MACxBvC,KAAKY,UAAYmB,EAAMS,KACvBxC,KAAKkB,iBAAmBlB,KAAKM,YAAcN,KAAKE,+CAEvCiC,GACTnC,KAAKa,KAAOsB,EAAMtB,KAClBb,KAAKc,aAAeqB,EAAMrB,aAC1Bd,KAAKe,cAAgBoB,EAAMpB,cAC3Bf,KAAKgB,UAAYmB,EAAMnB,UACvBhB,KAAKiB,cAAgBkB,EAAMlB,mDAElBwB,GACT,IAAMhD,EAASO,KAAKP,OACdiD,EAAsBD,EAC5BzC,KAAKoB,mBAAqBpB,KAAKkB,iBAAmBwB,EAClD1C,KAAKmB,aAAenB,KAAKa,KAAOb,KAAKoB,mBACrCpB,KAAKqB,qBAAwBrB,KAAKoB,mBAAqB3B,EAAU,GACjEO,KAAKsB,yBAAsD,GAA3BtB,KAAKoB,mBAA6B,GAClEpB,KAAKuB,eAAiBvB,KAAKqB,qBAAuBrB,KAAKsB,iCC5G1CqB,aACjB,SAAAA,IAAsD,IAA1CC,EAA0CjD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlC,GAAIkD,EAA8BlD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,GAAI8B,EAAe9B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAAMG,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,GAClD3C,KAAK8C,UAAY,GACjB9C,KAAK+C,WAAa,EAClB/C,KAAK4C,MAAQA,EACb5C,KAAKgD,aAAeC,KAAKA,KAAKC,OAC9BlD,KAAK6C,SAAWA,EAChB7C,KAAKmD,GAAKA,EACVnD,KAAKoD,qBAAuB,EAE5BpD,KAAKqD,0BAA0B5B,GAE/B0B,yDAEKlD,EAAQqD,EAAW7D,GACxB,IAAI8D,EAAQ,IAAIjE,EAAMW,EAAQqD,EAAW7D,GACzCO,KAAK8C,UAAU7C,GAAUsD,oDAEH9B,GACP,OAAXA,IAEAzB,KAAK8C,UAAYrB,EAAOqB,UACxB9C,KAAK+C,WAAatB,EAAOsB,WACzB/C,KAAKgD,aAAevB,EAAOuB,aAC3BhD,KAAKoD,qBAAuB3B,EAAO2B,kLAInCI,EAAO1D,OAAO0D,KAAKxD,KAAK8C,WAC5B9C,KAAKgD,aAAeC,KAAKA,KAAKC,OAC9BlD,KAAK+C,WAAa,oBACAS,kCAATD,EAASC,cACRxD,KAAK8C,UAAUS,GAAOE,wBAC5BzD,KAAK+C,YAAc/C,KAAK8C,UAAUS,GAAOrC,mDAE7ClB,KAAK0D,iKAGL,IAAIF,EAAO1D,OAAO0D,KAAKxD,KAAK8C,WAC5B9C,KAAKgD,aAAeC,KAAKA,KAAKC,OAC9B,QAAAS,EAAA,EAAAA,EAAkBH,EAAlB5D,OAAA+D,IAAwB,CAAnB,IAAIJ,EAASC,EAAJG,GACV3D,KAAK8C,UAAUS,GAAOK,aAAa5D,KAAK+C,YAE5C/C,KAAK6D,wEAGL,IAAIL,EAAO1D,OAAO0D,KAAKxD,KAAK8C,WAC5B9C,KAAKoD,qBAAuB,EAC5B,QAAAU,EAAA,EAAAA,EAAkBN,EAAlB5D,OAAAkE,IAAwB,CAAnB,IAAIP,EAASC,EAAJM,GACV9D,KAAKoD,sBAAwBpD,KAAK8C,UAAUS,GAAOhC,eAAiBvB,KAAK8C,UAAUS,GAAOnC,oDAG1F2C,GACJ/D,KAAK4C,MAAQmB,EACb/D,KAAKgD,aAAeC,KAAKA,KAAKC,2CAEtBc,GACRhE,KAAK6C,SAAWmB,EAChBhE,KAAKgD,aAAeC,KAAKA,KAAKC,gDAG9BlD,KAAK8C,UAAY,GACjB9C,KAAK+C,WAAa,EAClB/C,KAAKgD,aAAeC,KAAKA,KAAKC,OAC9BlD,KAAK6C,SAAW,GAChB7C,KAAK4C,MAAQ,GACb5C,KAAKoD,qBAAuB,WAIhCD,EAAK,EC3CMc,EAtCG,SAAAC,GAA4B,IAAzBX,EAAyBW,EAAzBX,MAAOY,EAAkBD,EAAlBC,YACxB,OAEIC,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVhB,EAAMtD,SAIfmE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVhB,EAAMrD,YAIfkE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVhB,EAAMpD,aAAe,oBAI9BiE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVC,OAAOC,WAAgC,IAArBlB,EAAMhC,gBAAoBmD,YAAY,GAAK,MAGtEN,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,UAAQK,QAAS,WAAKR,EAAYZ,KAC9Ba,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBCMtBK,SAjCG,SAAAV,GAAgC,IAA7BpB,EAA6BoB,EAA7BpB,UAAWqB,EAAkBD,EAAlBC,YACtBU,EAAW/E,OAAO0D,KAAKV,GAE7B,OACIsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,SAAOnB,GAAG,UACNiB,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,uCAKRF,EAAAC,EAAAC,cAAA,aACKO,EAASC,IAAI,SAAAC,GAAO,OACjBX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLxB,MAAOT,EAAUiC,GACjBZ,YAAaA,WC6H1Be,qBAxIX,SAAAA,EAAYC,GAAO,IAAAlD,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkF,IAEfjD,EAAAnC,OAAAsF,EAAA,EAAAtF,CAAAE,KAAAF,OAAAuF,EAAA,EAAAvF,CAAAoF,GAAAI,KAAAtF,KAAMmF,KA8BVI,mBAAqB,SAACC,GAClB,IAAMC,EAAYxD,EAAKyD,MAAMD,UAE7BA,EAAUE,QAAQH,EAAGI,OAAOC,OAC5B5D,EAAK6D,SAAS,CAACL,aAAY,kBAAMxD,EAAKkD,MAAMY,cAAcN,MApC3CxD,EAuCnB+D,oBAAsB,SAACC,GACnB,IAAMR,EAAYxD,EAAKyD,MAAMD,UAE7BA,EAAUS,YAAYD,EAAYE,SAAS,SAC3ClE,EAAK6D,SAAS,CAACL,YAAWQ,eAAc,kBAAIhE,EAAKkD,MAAMY,cAAcN,MA3CtDxD,EA8CnBmE,cAAgB,WACZnE,EAAK6D,SACD,CACIO,gBAAgB,EAChBC,kBAAkB,KAlDXrE,EAuDnBsE,cAAgB,WACZtE,EAAK6D,SACD,CACIO,gBAAgB,EAChBC,kBAAkB,KA3DXrE,EAgEnBkC,YAAc,SAACzE,GACX,IAAM+F,EAAYxD,EAAKyD,MAAMD,UACvBe,EAAYf,EAAU3C,UACtBmC,EAAMnF,OAAO0D,KAAKgD,GAAWC,KAAK,SAAAxB,GAAG,OAAIuB,EAAUvB,KAASvF,WAC3D8G,EAAUvB,GACjBQ,EAAU3C,UAAY0D,EACtBvE,EAAK6D,SAAS,CAACL,cACfxD,EAAKyD,MAAMD,UAAUiB,kBACrBzE,EAAKkD,MAAMY,cAAc9D,EAAKyD,MAAMD,YArEpCxD,EAAKyD,MAAQ,CACTD,UAAW,IAAI9C,EACfsD,YAAaU,IAAeC,mBAC5BP,gBAAgB,EAChBC,kBAAkB,GAPPrE,kFAWA4E,GACX7G,KAAKmF,MAAM2B,iBAAiBhE,YAAc+D,EAAUC,iBAAiBhE,WACrE9C,KAAK8F,SACD,CACIL,UAAWzF,KAAKmF,MAAM2B,iBACtBC,gBAAiB/G,KAAKmF,MAAM2B,iBAAiBC,gBAC7Cd,YAAaU,IAAeK,sBAAsBhH,KAAKmF,MAAM2B,iBAAiBjE,SAAS,oDAKrF2C,GACdA,EAAGyB,iBACH,IAAMhH,EAASiH,SAASC,eAAe,gBAAgBtB,MAAMuB,cACvD5H,EAAS0H,SAASC,eAAe,cAActB,MAC/CpG,EAASyH,SAASC,eAAe,mBAAmBtB,MAC1D7F,KAAK0F,MAAMD,UAAU4B,SAASpH,EAAQT,EAAQC,GAC9CO,KAAKmF,MAAMY,cAAc/F,KAAK0F,MAAMD,WACpCD,EAAGI,OAAO0B,oFA8CKC,mFACTA,EAAab,yBACnB1G,KAAKmF,MAAMqC,oBAAoBD,GAC/BvH,KAAKmF,MAAMY,cAAc/F,KAAK0F,MAAMD,+IAG/B,IAAAgC,EAAAzH,KAEL,OACIoE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAAeI,QAAS,WAAO8C,EAAKtC,MAAMqC,oBAAoB,IAAI7E,GAAc8E,EAAKrB,iBAAmBxD,MAAM,iBAC5HwB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,uBAGjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBI,QAAS3E,KAAKoG,cAAexD,MAAM,kBACjEwB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAGjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,gBAAgBI,QAAS3E,KAAKuG,cAAe3D,MAAM,cACjEwB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAGjBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAWvE,KAAK0F,MAAMW,eAAiB,SAAW,gBACnDjC,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,SACIjC,KAAK,OAAO0B,KAAK,QACjB2D,YAAY,uBAAuB7B,MAAO7F,KAAK0F,MAAMD,UAAU7C,MAC/D+E,SAAU3H,KAAKuF,mBAAoBqC,UAAQ,KAGnDxD,EAAAC,EAAAC,cAACuD,EAAAxD,EAAD,CACIlB,GAAG,MAAMY,KAAK,WAAW8B,MAAO7F,KAAK0F,MAAMO,YAC3C0B,SAAU3H,KAAKgG,oBAAqB0B,YAAY,4CAK5DtD,EAAAC,EAAAC,cAAA,QAAMC,UAAWvE,KAAK0F,MAAMY,iBAAmB,SAAW,YAAawB,SAAU9H,KAAK+H,kBAAkBC,KAAKhI,OACzGoE,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,OAAOc,GAAI,eAAeuE,YAAY,6BAA6BE,UAAQ,IACvFxD,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,SAASc,GAAG,aAAauE,YAAY,+BAA+BE,UAAQ,IACxFxD,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,SAASc,GAAG,kBAAkB8E,KAAK,MAAMP,YAAY,+CAA+CE,UAAQ,IACxHxD,EAAAC,EAAAC,cAAA,SAAOjC,KAAK,SAASwD,MAAM,uBAG/BzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWvE,KAAK0F,MAAMY,iBAAmB,SAAW,sBACrDlC,EAAAC,EAAAC,cAAC4D,EAAD,CACIpF,UAAW9C,KAAK0F,MAAMD,UAAU3C,UAChCqB,YAAanE,KAAKmE,eAI1BC,EAAAC,EAAAC,cAAA,UAAQC,UAAWvE,KAAK0F,MAAMY,iBAAmB,SAAW,UACxD3B,QAAS,WAAO8C,EAAKU,YAAYV,EAAK/B,MAAMD,aADhD,+BAhIe2C,cCoBhBC,EAjCO,SAAAnE,GAAuD,IAApDuB,EAAoDvB,EAApDuB,UAAU+B,EAA0CtD,EAA1CsD,oBAAoBc,EAAsBpE,EAAtBoE,gBAKnD,OACIlE,EAAAC,EAAAC,cAAA,KAAGK,QALa,WAChB6C,EAAoB/B,KAKhBrB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBACVI,QAAS,WAAO2D,EAAgB7C,IAChC7C,MAAM,oBAEVwB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACVkB,EAAU7C,OAEfwB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXgE,wBAAyB,CAACC,OAAQ/C,EAAU5C,YAIhDuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACV,2BAA6BC,OAAOC,WAA0C,IAA/BgB,EAAUrC,sBAA0BsB,YAAY,GAAK,SCkB9G+D,SAvCO,SAAAvE,GAAyE,IAAtEwE,EAAsExE,EAAtEwE,WAAYlB,EAA0DtD,EAA1DsD,oBAAqBzB,EAAqC7B,EAArC6B,cAAeuC,EAAsBpE,EAAtBoE,gBAC/DK,EAAe7I,OAAO0D,KAAKkF,GACjC,OACItE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,MAAInB,GAAG,cACFwF,EAAa7D,IAAI,SAAA8D,GAAW,OACzBxE,EAAAC,EAAAC,cAACuE,EAAD,CACI5D,IAAK2D,EACLnD,UAAWiD,EAAWE,GACtBpB,oBAAqBA,EACrBc,gBAAmBA,OAI/BlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,UACInB,GAAG,cACHwB,QAAS,WAAOmE,QAAQC,IAAI,iBAC5BnG,MAAM,cAHV,iBAKAwB,EAAAC,EAAAC,cAAA,UACInB,GAAG,YACHwB,QAAO7E,OAAAkJ,EAAA,EAAAlJ,CAAAmJ,EAAA5E,EAAA6E,KACH,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAA5E,EAAAgF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAAAF,EAAAG,GAAAR,EAAA5E,EAAAb,KACkBkF,GADlB,WAAAY,EAAAI,GAAAJ,EAAAG,MAAAE,KAAA,CAAAL,EAAAE,KAAA,eACaJ,EADbE,EAAAI,GAAA7D,MAAAyD,EAAAE,KAAA,EAEcd,EAAWU,GAAG1C,kBAF5B,OAGQX,EAAc2C,EAAWU,IAHjCE,EAAAE,KAAA,gCAAAF,EAAAM,SAAAT,EAAAnJ,SAOJ4C,MAAM,cAVV,+BCDDiH,EApBF,SAAC1E,GACV,OACIf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAACwF,EAAD,CACIpB,WAAYvD,EAAMuD,WAClBlB,oBAAqBrC,EAAMqC,oBAC3BzB,cAAeZ,EAAMY,cACrBuC,gBAAmBnD,EAAMmD,kBAE7BlE,EAAAC,EAAAC,cAACyF,EAAD,CACIhE,cAAeZ,EAAMY,cACrB2C,WAAYvD,EAAMuD,WAClBlB,oBAAqBrC,EAAMqC,oBAC3BV,iBAAkB3B,EAAM2B,qBC0FzBkD,cAhGX,SAAAA,IAAc,IAAA/H,EAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgK,IACV/H,EAAAnC,OAAAsF,EAAA,EAAAtF,CAAAE,KAAAF,OAAAuF,EAAA,EAAAvF,CAAAkK,GAAA1E,KAAAtF,QAoBJiK,uBAAyB,SAACvB,GAItB,IAHA,IACIwB,EADAC,EAAsB,GAEpBC,EAAgBtK,OAAO0D,KAAKkF,GAClC2B,EAAA,EAAAA,EAAwBD,EAAxBxK,OAAAyK,IAAuC,CAAlC,IAAIzB,EAAewB,EAAJC,GACZC,EAAe5B,EAAWE,GAE9BuB,EAAoBvB,GAAe,IAAIjG,EAAU2H,EAAa1H,MAAO0H,EAAazH,SAAUyH,GAC5FJ,EAAqBC,EAAoBvB,GACzC,IAAI9F,EAAYb,EAAKsI,mBAAmBL,GACxCA,EAAmBpH,UAAYA,EAGnC,OADAb,EAAKsI,mBAAmBL,GACjBC,GAlCGlI,EAqCdsI,mBAAqB,SAACC,GAGlB,IAFA,IAAI1H,EAAY,GACZ2H,EAAY3K,OAAO0D,KAAKgH,EAAgB1H,WAC5Ca,EAAA,EAAAA,EAAoB8G,EAApB7K,OAAA+D,IAA+B,CAA1B,IAAIoB,EAAW0F,EAAJ9G,GAERjE,EAAW8K,EAAgB1H,UAAUiC,GACzCjC,EAAUiC,GAAW,IAAIzF,EAAMI,EAASO,OAAQP,EAASQ,UAAWR,EAASD,OAAQC,GAEzF,OAAOoD,GA7CGb,EAgDd8D,cAAgB,SAAC/D,GACb,IAAM0G,EAAazG,EAAKyD,MAAMgD,WACxBzD,EAAMnF,OAAO0D,KAAKkF,GAAYjC,KAAK,SAAAxB,GAAG,OAAGyD,EAAWzD,KAASjD,WAC5D0G,EAAWzD,GACbnF,OAAO0D,KAAKkF,GAAYgC,SAAS1I,EAAKmB,MACvCuF,EAAW1G,EAAKmB,IAAMnB,EACtBC,EAAK6D,SAAS,CAAE4C,eAChBzG,EAAK0I,uBAvDC1I,EA4Dd0I,mBAAqB,WACjBC,aAAaC,QAAQ,aAAcC,KAAKC,UAAU9I,EAAKyD,MAAMgD,aAC7DkC,aAAaC,QAAQ,mBAAoBC,KAAKC,UAAU9I,EAAKyD,MAAMoB,oBA9DzD7E,EAiEdqG,gBAAkB,SAACgC,GACf,IAAMU,EAAiB/I,EAAKyD,MAAMgD,WAC5BzD,EAAMnF,OAAO0D,KAAKwH,GAAgBvE,KAAK,SAAAxB,GAAG,OAAI+F,EAAe/F,KAASqF,WACrEU,EAAe/F,GACtBhD,EAAK6D,SAAS,CAAC4C,WAAWsC,IAC1B/I,EAAK0I,sBAtEK1I,EAyEduF,oBAAsB,SAAC/B,GACnBxD,EAAK6D,SAAS,CAAEgB,iBAAkBrB,KAvElCxD,EAAKyD,MAAQ,CACTgD,WAAY,GACZ5B,iBAAkB,IAAInE,GALhBV,mFAUV,IAAIgJ,EAAKL,aAAaM,QAAQ,cAC9B,GAAW,OAAPD,GAA0C,IAA3BnL,OAAO0D,KAAKyH,GAAIrL,OAAc,CAC7C,IAAM8I,EAAaoC,KAAKK,MAAMP,aAAaM,QAAQ,eACnDlL,KAAK8F,SAAS,CAAE4C,WAAY,KAC5B,IAAIyB,EAAsBnK,KAAKiK,uBAAuBvB,GACtD1I,KAAK8F,SAAS,CACV4C,WAAYyB,sCA8DpB,IAAMiB,EAAU,CACZrF,cAAe/F,KAAK+F,cACpByB,oBAAqBxH,KAAKwH,oBAC1Bc,gBAAiBtI,KAAKsI,iBAE1B,OAEIlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC+G,EAADvL,OAAAwL,OAAA,GACQF,EADR,CAEI1C,WAAY1I,KAAK0F,MAAMgD,WACvB5B,iBAAkB9G,KAAK0F,MAAMoB,4BA1F/BsB,aCPEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzH,EAAAC,EAAAC,cAACwH,EAAD,MAAS5E,SAASC,eAAe,SDuH3C,kBAAmB4E,WACrBA,UAAUC,cAAcC,MAAMpK,KAAK,SAAAqK,GACjCA,EAAaC","file":"static/js/main.bc287257.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst baseAPILink = 'https://api.iextrading.com/1.0/stock/';\r\nconst quoteLink = '/batch?types=quote';\r\nconst stockStatsLink = '/stats';\r\n\r\n/* Stock.js\r\n*   Purpose: Create stock objects \r\n*   Result:  Stock objects have been created and can alter a stock's value using member functions\r\n*   Member Functions:\r\n*       createStockFromObject - given a stock dictionary value, create a new stock object\r\n*       fetchStockInfo        - async function to fetch the stock information using IEX Finance API\r\n*       buildLink             - build the link used for the IEX Finance API\r\n*       setBasicStats         - set the basic stats of a stock object for later analysis\r\n*       setStockInfo          - set additional information necessary for the analysis. Needed because IEX Finance API doesn't include\r\n*                                  this with the information set in the setBasicStats request.\r\n*       analyzeStock          - use the standard methods for analyzing a stock to determine it's expected annual return\r\n*/\r\n\r\nexport default class Stock {\r\n\r\n    constructor(symbol, shares, growth, stockObj = null) {\r\n        this.ticker = symbol;\r\n        this.numShares = shares;\r\n        this.growth = growth;\r\n        this.companyName = '';\r\n        this.latestTime = null;\r\n        this.primaryExchange = null;\r\n        this.latestPrice = null;\r\n        this.PERatio = null;\r\n        this.week52High = null;\r\n        this.week52Low = null;\r\n        this.ytdChange = null;\r\n        this.closePrice = null;\r\n        this.openPrice = null;\r\n        this.beta = null;\r\n        this.dividendRate = null;\r\n        this.dividendYield = null;\r\n        this.latestEPS = null;\r\n        this.latestEPSDate = null;\r\n        this.investmentAmount = null;\r\n        this.weightedBeta = null;\r\n        this.portionOfPortfolio = null;\r\n        this.expectedGrowthReturn = 0;\r\n        this.expectedRecessionReturn = 0;\r\n        this.expectedReturn = 0;\r\n\r\n        this.createStockFromObject(stockObj);\r\n    }\r\n\r\n    createStockFromObject(object) {\r\n        if (object === null) { return; }\r\n        else {\r\n            this.companyName = object.companyName;\r\n            this.latestTime = object.latestTime;\r\n            this.primaryExchange = object.primaryExchange;\r\n            this.latestPrice = object.latestPrice;\r\n            this.PERatio = object.PERatio;\r\n            this.week52High = object.week52High;\r\n            this.week52Low = object.week52Low;\r\n            this.ytdChange = object.ytdChange;\r\n            this.closePrice = object.closePrice;\r\n            this.openPrice = object.openPrice;\r\n            this.beta = object.beta;\r\n            this.dividendRate = object.dividendRate;\r\n            this.dividendYield = object.dividendYield;\r\n            this.latestEPS = object.latestEPS;\r\n            this.latestEPSDate = object.latestEPSDate;\r\n            this.investmentAmount = object.investmentAmount;\r\n            this.weightedBeta = object.weightedBeta;\r\n            this.portionOfPortfolio = object.portionOfPortfolio;\r\n            this.expectedGrowthReturn = object.expectedGrowthReturn;\r\n            this.expectedRecessionReturn = object.expectedRecessionReturn;\r\n            this.expectedReturn = object.expectedReturn;\r\n        }\r\n    }\r\n\r\n    async fetchStockInfo() {\r\n        //Need to handle when the ticker symbol is not found. \r\n        // Not sure what payload is delivered in this case.\r\n        await axios.get(this.buildLink('quote', this.ticker))\r\n            .then(response => {\r\n                const quote = response.data.quote;\r\n                this.setBasicStats(quote);\r\n            });\r\n        await axios.get(this.buildLink('stats', this.ticker))\r\n            .then(response => {\r\n                const stats = response.data;\r\n                this.setStockInfo(stats);\r\n            });\r\n\r\n    }\r\n    buildLink(type, ticker) {\r\n        if (type === 'quote') {\r\n            return baseAPILink + ticker + quoteLink;\r\n        }\r\n        else if (type === 'stats') {\r\n            return baseAPILink + ticker + stockStatsLink;\r\n        }\r\n    }\r\n    setBasicStats(quote) {\r\n        this.companyName = quote.companyName;\r\n        this.latestTime = quote.latestTime;\r\n        this.primaryExchange = quote.primaryExchange;\r\n        this.latestPrice = quote.latestPrice;\r\n        this.PERatio = quote.peRatio;\r\n        this.week52High = quote.week52High;\r\n        this.week52Low = quote.week52Low;\r\n        this.ytdChange = quote.ytdChange;\r\n        this.closePrice = quote.close;\r\n        this.openPrice = quote.open;\r\n        this.investmentAmount = this.latestPrice * this.numShares;\r\n    }\r\n    setStockInfo(stats) {\r\n        this.beta = stats.beta;\r\n        this.dividendRate = stats.dividendRate;\r\n        this.dividendYield = stats.dividendYield;\r\n        this.latestEPS = stats.latestEPS;\r\n        this.latestEPSDate = stats.latestEPSDate;\r\n    }\r\n    analyzeStock(portion) {\r\n        const growth = this.growth;\r\n        const totalPortfolioValue = portion;\r\n        this.portionOfPortfolio = this.investmentAmount / totalPortfolioValue;\r\n        this.weightedBeta = this.beta * this.portionOfPortfolio;\r\n        this.expectedGrowthReturn = (this.portionOfPortfolio * growth) * 0.8;\r\n        this.expectedRecessionReturn = (this.portionOfPortfolio * -0.2) * 0.2;\r\n        this.expectedReturn = this.expectedGrowthReturn + this.expectedRecessionReturn;\r\n    }\r\n}\r\n\r\n","import Stock from './Stock.js';\r\n\r\n/* Portfolio.js\r\n*   Purpose: Create portfolio objects\r\n*   Result:  Portfolio objects created and can be manipulated using the webpage\r\n*   Member Functions:\r\n*       addStock                  - add a stock to the active portfolio's stockList object (thus, creating a dictionary of stockObjects)\r\n*       createPortfolioFromObject - given an object reflecting a portfolio, convert it into a Portfolio. Generally used\r\n*                                      to allow loading of portfolio objects as they don't keep the Portfolio prototype upon storage\r\n*       updatePortfolio           - updates the stock information of all stocks in the portfolio. Once the information has been fetched,\r\n*                                      the portfolio analyses the stocks using analyzePortfolio\r\n*       analyzePortfolio          - for every stock in the stockList, analyze the value of the stock. Then, use updatePortfolioReturn to determine\r\n*                                      and set the value of the portfolio's expected annual return\r\n*       updatePortfolioReturn     - calculate/update the portfolio's expected annual return\r\n*       setName                   - save changes from title alterations in the interactive part of the webpage\r\n*       setComments               - save changes from comment alterations in the interactive part of the webpage\r\n*       resetPortfolio            - reset the portfolio to initial values outlined in the constructor\r\n*/\r\n\r\nexport default class Portfolio {\r\n    constructor(title = '', comments = '', object = null) {\r\n        this.stockList = {};\r\n        this.totalValue = 0;\r\n        this.title = title;\r\n        this.lastModified = Date(Date.now());\r\n        this.comments = comments;\r\n        this.id = id;\r\n        this.expectedAnnualReturn = 0;\r\n\r\n        this.createPortfolioFromObject(object);\r\n\r\n        id++;\r\n    }\r\n    addStock(ticker, numshares, growth) {\r\n        let stock = new Stock(ticker, numshares, growth);\r\n        this.stockList[ticker] = stock;\r\n    }\r\n    createPortfolioFromObject(object) {\r\n        if (object === null) { return; }\r\n        else {\r\n            this.stockList = object.stockList;\r\n            this.totalValue = object.totalValue;\r\n            this.lastModified = object.lastModified;\r\n            this.expectedAnnualReturn = object.expectedAnnualReturn;\r\n        }\r\n    }\r\n    async updatePortfolio() {\r\n        let keys = Object.keys(this.stockList);\r\n        this.lastModified = Date(Date.now());\r\n        this.totalValue = 0;\r\n        for (let stock of keys) {\r\n            await this.stockList[stock].fetchStockInfo();\r\n            this.totalValue += this.stockList[stock].investmentAmount;\r\n        }\r\n        this.analyzePortfolio();\r\n    }\r\n    analyzePortfolio() {\r\n        let keys = Object.keys(this.stockList);\r\n        this.lastModified = Date(Date.now());\r\n        for (let stock of keys) {\r\n            this.stockList[stock].analyzeStock(this.totalValue);\r\n        }\r\n        this.updatePortfolioReturn();\r\n    }\r\n    updatePortfolioReturn() {\r\n        let keys = Object.keys(this.stockList);\r\n        this.expectedAnnualReturn = 0;\r\n        for (let stock of keys) {\r\n            this.expectedAnnualReturn += this.stockList[stock].expectedReturn * this.stockList[stock].portionOfPortfolio;\r\n        }\r\n    }\r\n    setName(name) {\r\n        this.title = name;\r\n        this.lastModified = Date(Date.now());\r\n    }\r\n    setComments(comment) {\r\n        this.comments = comment;\r\n        this.lastModified = Date(Date.now());\r\n    }\r\n    resetPortfolio() {\r\n        this.stockList = {};\r\n        this.totalValue = 0;\r\n        this.lastModified = Date(Date.now());\r\n        this.comments = \"\";\r\n        this.title = \"\";\r\n        this.expectedAnnualReturn = 0;\r\n    }\r\n}\r\n\r\nvar id = 0;\r\n","import React from 'react';\r\n\r\n/* StockItem.js\r\n*   Purpose:    Dynamically populate the stock list displayed to the user on the stock edit portion of the portfolioManager\r\n*   Result:     Render the stock information correctly within the table of stocks\r\n*   Member Functions: N/A\r\n*/\r\n\r\nconst StockItem = ({ stock, removeStock }) => {\r\n    return (\r\n\r\n        <tr>\r\n            <td>\r\n                <div className=\"stock-ticker\">\r\n                    {stock.ticker}\r\n                </div>\r\n            </td>\r\n\r\n            <td>\r\n                <div className=\"stock-shares\">\r\n                    {stock.numShares}\r\n                </div>\r\n            </td>\r\n\r\n            <td>\r\n                <div className=\"stock-shares\">\r\n                    {stock.companyName || \"Not Yet Fetched\"}\r\n                </div>\r\n            </td>\r\n\r\n            <td>\r\n                <div className=\"stock-shares\">\r\n                    {Number.parseFloat(stock.expectedReturn*100).toPrecision(4) + \"%\"}\r\n                </div>\r\n            </td>\r\n            <td>\r\n                <div className=\"remove-stock\">\r\n                    <button onClick={()=>{removeStock(stock)}}>\r\n                        <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                </div>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default StockItem;","import React from 'react';\r\nimport StockItem from './StockItem';\r\n\r\nimport '../StyleSheets/StockList.css';\r\n\r\n/* StockList.js\r\n*   Purpose:    Create a stock list to display the important information regarding the stocks in the portfolio to the user\r\n*   Result:     Render a list of stocks for the user to see in the portfolio stock list editor\r\n*   Member Functions: N/A\r\n*/\r\n\r\nconst StockList = ({ stockList, removeStock }) => {\r\n    const stockIds = Object.keys(stockList);\r\n\r\n    return (\r\n        <div className=\"stockList\">\r\n            <table id=\"stocks\">\r\n                <thead>\r\n                    <tr>\r\n                        <th> Stock Ticker</th>\r\n\r\n                        <th> Number of Shares</th>\r\n\r\n                        <th> Company Name</th>\r\n\r\n                        <th> Annual Expected Return</th>\r\n\r\n                        \r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {stockIds.map(stockId => (\r\n                        <StockItem\r\n                            key={stockId}\r\n                            stock={stockList[stockId]}\r\n                            removeStock={removeStock}\r\n                        />\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StockList;","import React, {Component} from 'react';\r\nimport RichTextEditor from 'react-rte';\r\n\r\nimport Portfolio from '../LogicComponents/Portfolio.js';\r\nimport StockList from './StockList';\r\nimport '../StyleSheets/PortfolioManager.css';\r\n\r\n/* PortfolioManager.js\r\n*   Purpose:    Manage a portfolio. Allow a user to change the title and comments, create new portfolios, add stocks to the stock list\r\n                and analyze the stocks as well as the portfolio object.\r\n*   Result:     The user is able to see the basic portfolio information as well as an annual expected return for individual stocks and the portfolio\r\n*   Member Functions:\r\n*        componentDidUpdate  - once changes are made to the app's state and new props are recieved, be sure to update this component to reflect those changes\r\n*        handleStockSubmit   - take the information entered from user input on the stock form (ticker, number of shares, growth) and add that stock to the\r\n*                                portfolio's stockList. Then, save that updated portfolio using savePortfolio from the App's props\r\n*        handleTitleChanges  - save all changes to the title of a portfolio using savePortfolio from App's props\r\n*        handleEditorChanges - save all changes to the comments of a portoflio using savePortfolio from App's props\r\n*        editPortfolio       - toggle view to show the \"edit\" portion of the portfolio (allowing the user to change the title and comments of a portfolio)\r\n*        viewPortfolio       - toggle view to show the \"view\" portion of the portfolio (allowing the user to add stocks to the portfolio's stock list)\r\n*        fetchStocks         - get the stocks for a portfolio and analyze those stocks in the process (called after hitting the \"Analyze Portfolio\" button)\r\n*        removeStock         - remove a specific stock from the active portfolio's stock list\r\n*/\r\n\r\nclass PortfolioManager extends Component {\r\n    constructor(props) {\r\n        \r\n        super(props);\r\n        this.state = {\r\n            portfolio: new Portfolio(),\r\n            editorValue: RichTextEditor.createEmptyValue(),\r\n            editViewHidden: false,\r\n            viewStocksHidden: true,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if (this.props.currentPortfolio.stockList !== prevProps.currentPortfolio.stockList){\r\n            this.setState(\r\n                {\r\n                    portfolio: this.props.currentPortfolio,\r\n                    totalInvestment: this.props.currentPortfolio.totalInvestment,\r\n                    editorValue: RichTextEditor.createValueFromString(this.props.currentPortfolio.comments,'html')\r\n                });\r\n        }\r\n    }\r\n\r\n    handleStockSubmit(ev) {\r\n        ev.preventDefault();\r\n        const ticker = document.getElementById('stock-ticker').value.toUpperCase();\r\n        const shares = document.getElementById('num-shares').value; \r\n        const growth = document.getElementById('expected-growth').value;\r\n        this.state.portfolio.addStock(ticker, shares, growth);\r\n        this.props.savePortfolio(this.state.portfolio); \r\n        ev.target.reset();\r\n    }\r\n\r\n    handleTitleChanges = (ev) => {\r\n        const portfolio = this.state.portfolio;\r\n        \r\n        portfolio.setName(ev.target.value);\r\n        this.setState({portfolio}, () => this.props.savePortfolio(portfolio));\r\n    }\r\n\r\n    handleEditorChanges = (editorValue) => {\r\n        const portfolio = this.state.portfolio;\r\n  \r\n        portfolio.setComments(editorValue.toString('html'));\r\n        this.setState({portfolio, editorValue}, ()=>this.props.savePortfolio(portfolio)); \r\n    }\r\n\r\n    editPortfolio = () => {\r\n        this.setState(\r\n            {\r\n                editViewHidden: false,\r\n                viewStocksHidden: true,\r\n            }\r\n        )\r\n    }\r\n\r\n    viewPortfolio = () => {\r\n        this.setState(\r\n            {\r\n                editViewHidden: true,\r\n                viewStocksHidden: false,\r\n            }\r\n        )\r\n    }\r\n\r\n    removeStock = (stockObj) => {\r\n        const portfolio = this.state.portfolio;\r\n        const lessStock = portfolio.stockList\r\n        const key = Object.keys(lessStock).find(key => lessStock[key] === stockObj);\r\n        delete lessStock[key];\r\n        portfolio.stockList = lessStock;\r\n        this.setState({portfolio});\r\n        this.state.portfolio.updatePortfolio();\r\n        this.props.savePortfolio(this.state.portfolio);        \r\n    }\r\n\r\n    async fetchStocks (rawPortfolio) {\r\n        await rawPortfolio.updatePortfolio();\r\n        this.props.setCurrentPortfolio(rawPortfolio);\r\n        this.props.savePortfolio(this.state.portfolio);\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"portfolioManager\">\r\n                <button className=\"newPortfolio\" onClick={() => {this.props.setCurrentPortfolio(new Portfolio()); this.editPortfolio();}} title=\"Add Portfolio\">\r\n                    <i className=\"fa fa-plus-circle\"></i>\r\n                </button>\r\n\r\n                <button className=\"editPortfolio\" onClick={this.editPortfolio} title=\"Edit Portfolio\">\r\n                    <i className=\"fa fa-edit\"></i>\r\n                </button>\r\n\r\n                <button className=\"viewPortfolio\" onClick={this.viewPortfolio} title=\"Add Stocks\">\r\n                    <i className=\"fa fa-list\"></i>\r\n                </button>\r\n\r\n                <form className=\"portfolio-attributes\">\r\n                    <div className={this.state.editViewHidden ? \"hidden\" : \"form-actions\"}>\r\n                        <p>\r\n                            <input\r\n                                type=\"text\" name=\"title\"\r\n                                placeholder=\"Title your Portfolio\" value={this.state.portfolio.title}\r\n                                onChange={this.handleTitleChanges} required\r\n                            />\r\n                        </p>\r\n                        <RichTextEditor\r\n                            id=\"rte\" name=\"comments\" value={this.state.editorValue}\r\n                            onChange={this.handleEditorChanges} placeholder=\"Add a note about your portfolio . . .\">\r\n                        </RichTextEditor>\r\n                    </div>\r\n                </form>\r\n                \r\n                <form className={this.state.viewStocksHidden ? \"hidden\" : \"stockForm\"} onSubmit={this.handleStockSubmit.bind(this)}>\r\n                    <input type=\"text\" id =\"stock-ticker\" placeholder=\"Enter a stock symbol . . .\" required/>\r\n                    <input type=\"number\" id=\"num-shares\" placeholder=\"Enter number of shares . . .\" required />\r\n                    <input type=\"number\" id=\"expected-growth\" step=\"any\" placeholder=\"Enter the expected growth % for 1 year . . .\" required />\r\n                    <input type=\"submit\" value=\"Add Stock to List\"/>\r\n                </form>\r\n                \r\n                <div className={this.state.viewStocksHidden ? \"hidden\" : \"portfolioStockList\"}>\r\n                    <StockList\r\n                        stockList={this.state.portfolio.stockList}\r\n                        removeStock={this.removeStock}\r\n                    />\r\n                </div>\r\n                \r\n                <button className={this.state.viewStocksHidden ? \"hidden\" : \"analyze\"}\r\n                    onClick={() => {this.fetchStocks(this.state.portfolio)}}> Analyze Stock List\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default PortfolioManager;","import React from 'react';\r\n\r\n/* PortfolioItem.js\r\n*   Purpose: Dynamically create an item in the portfolio list with the details of a specific portfolio\r\n*   Result:  Portfolio list is populated with all the portfolios in the current portfolio object\r\n*   Member Functions: N/A\r\n*\r\n*\r\n*/\r\n\r\nconst PortfolioItem = ({ portfolio,setCurrentPortfolio,removePortfolio }) => {\r\n    const handleClick = () => {\r\n        setCurrentPortfolio(portfolio);\r\n\r\n    }\r\n    return (\r\n        <a onClick = {handleClick}>\r\n            <li >    \r\n                <div className=\"portfolio\">\r\n                    <button className=\"remove-portfolio\" \r\n                            onClick={() => {removePortfolio(portfolio)}}\r\n                            title=\"Delete Portfolio\"\r\n                    >\r\n                        <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                    <div className=\"portfolio-title\">\r\n                        {portfolio.title}\r\n                    </div>\r\n                    <div className=\"portfolio-comments\"\r\n                        dangerouslySetInnerHTML={{__html: portfolio.comments}}\r\n                    >\r\n                    </div>\r\n\r\n                    <div className=\"portfolio-return\">\r\n                        {\"Expected Annual Return: \" + Number.parseFloat(portfolio.expectedAnnualReturn*100).toPrecision(4) + \"%\"}\r\n                    </div>\r\n                </div>\r\n\r\n            </li>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default PortfolioItem;","import React from 'react';\r\nimport PortfolioItem from './PortfolioListItem';\r\nimport '../StyleSheets/PortfolioList.css';\r\n\r\n/* PortfolioList.js\r\n*   Purpose: Render the list of the portfolios and allow for the user to analyze all portfolios in a single click\r\n*   Result:  The portfolio list is created based on what items are returned from the portfolioListItem component.\r\n             The user is also able to analyze all portfolios in the current list.\r\n*   Member Functions: N/A\r\n*\r\n*\r\n*/\r\n\r\nconst PortfolioList = ({ portfolios, setCurrentPortfolio, savePortfolio, removePortfolio }) => {\r\n    const portfolioIds = Object.keys(portfolios);\r\n    return (\r\n        <div className=\"portfolioList\">\r\n            <h3>Portfolio List </h3>\r\n            <ul id=\"portfolios\">\r\n                {portfolioIds.map(portfolioId => (\r\n                    <PortfolioItem\r\n                        key={portfolioId}\r\n                        portfolio={portfolios[portfolioId]}\r\n                        setCurrentPortfolio={setCurrentPortfolio}\r\n                        removePortfolio = {removePortfolio}\r\n                    />\r\n                ))}\r\n            </ul>\r\n            <div className=\"actionBar\">\r\n                <button \r\n                    id=\"printReport\" \r\n                    onClick={() => {console.log(\"print report\")}}\r\n                    title=\"Run Report\"> Print Report\r\n                </button>\r\n                <button \r\n                    id=\"runReport\" \r\n                    onClick={\r\n                        async function () {\r\n                            for (let i in portfolios){\r\n                                await portfolios[i].updatePortfolio();\r\n                                savePortfolio(portfolios[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    title=\"Run Report\"> Analyze All Portfolios\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PortfolioList;","import React from 'react';\r\nimport '../StyleSheets/Main.css';\r\n\r\nimport PortfolioManager from './PortfolioManager';\r\nimport PortfolioList from './PortfolioList';\r\n\r\n\r\n/* Main.js\r\n*   Purpose: Disseminate information from props received from App.js to the correct React component\r\n*   Result:  Components recieved the correct properties necessary to complete their purpose\r\n*   Member Functions: N/A\r\n*/\r\n\r\nconst Main = (props) => {\r\n    return (\r\n        <div className=\"Main\">\r\n            <PortfolioList\r\n                portfolios={props.portfolios}\r\n                setCurrentPortfolio={props.setCurrentPortfolio}\r\n                savePortfolio={props.savePortfolio}\r\n                removePortfolio = {props.removePortfolio}\r\n            />\r\n            <PortfolioManager\r\n                savePortfolio={props.savePortfolio}\r\n                portfolios={props.portfolios}\r\n                setCurrentPortfolio={props.setCurrentPortfolio}\r\n                currentPortfolio={props.currentPortfolio}\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import React, { Component } from 'react';\r\nimport '../StyleSheets/App.css';\r\nimport Main from './Main'\r\nimport Portfolio from '../LogicComponents/Portfolio';\r\nimport Stock from '../LogicComponents/Stock';\r\n\r\n\r\n/* App.js\r\n*   Purpose: To store app state and contain the information pertinent to the app's functionality\r\n*   Result:  Loads previously stored portfolios and allows the user to save new or update older portfolios to the general application\r\n             Controls the flow of information from the top down using React Components\r\n*   Member Functions:\r\n*       componentDidMount      - called when the component mounts to the DOM. Handles loading the information from localStorage when App mounts\r\n*       createPortfolioObjects - helper function for componentDidMount; takes the portfolios stored in the localStorage and converts them back to Portfolio Objects\r\n*       createStockObjects     - similar to createPortfolioObjects, but takes a portfolio's stockList and turns them into Stock Objects\r\n*       savePortfolio          - used to update the app's state from the PortfolioManager to store changes to a portfolio\r\n*       setCurrentPortfolio    - used to tell the PortfolioManager component which portfolio is currently being used/altered by the user\r\n*       saveToLocalStorage     - save the currentPortfolio and portfolios stored in the App's state to the local storage for retrieval later\r\n*/\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n\r\n        this.state = {\r\n            portfolios: {},\r\n            currentPortfolio: new Portfolio(),\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let ls = localStorage.getItem('portfolios');\r\n        if (ls !== null && Object.keys(ls).length !== 2) {\r\n            const portfolios = JSON.parse(localStorage.getItem('portfolios'));\r\n            this.setState({ portfolios: {} });\r\n            let loadedPortfolioList = this.createPortfolioObjects(portfolios);        \r\n            this.setState({\r\n                portfolios: loadedPortfolioList\r\n            });\r\n        }\r\n    }\r\n\r\n    createPortfolioObjects = (portfolios) => {\r\n        let loadedPortfolioList = {};\r\n        let loadedPortfolioObj;\r\n        const portfolioKeys = Object.keys(portfolios);\r\n        for (let portfolioId of portfolioKeys) {\r\n            let portfolioObj = portfolios[portfolioId];\r\n            //Each portfolio we find, create a portfolio object from it\r\n            loadedPortfolioList[portfolioId] = new Portfolio(portfolioObj.title, portfolioObj.comments, portfolioObj);\r\n            loadedPortfolioObj = loadedPortfolioList[portfolioId];\r\n            let stockList = this.createStockObjects(loadedPortfolioObj);\r\n            loadedPortfolioObj.stockList = stockList;\r\n        }\r\n        this.createStockObjects(loadedPortfolioObj);\r\n        return loadedPortfolioList;\r\n    }\r\n\r\n    createStockObjects = (portfolioObject) => {\r\n        let stockList = {};\r\n        let stockKeys = Object.keys(portfolioObject.stockList);\r\n        for (let stockId of stockKeys) {\r\n            //Each stock we find, create a stock object from it\r\n            let stockObj = portfolioObject.stockList[stockId];\r\n            stockList[stockId] = new Stock(stockObj.ticker, stockObj.numShares, stockObj.growth, stockObj);\r\n        }\r\n        return stockList;\r\n    }\r\n\r\n    savePortfolio = (data) => {\r\n        const portfolios = this.state.portfolios;\r\n        const key = Object.keys(portfolios).find(key=> portfolios[key] === data);\r\n        delete portfolios[key];\r\n        if (!Object.keys(portfolios).includes(data.id)) {\r\n            portfolios[data.id] = data;\r\n            this.setState({ portfolios });\r\n            this.saveToLocalStorage();\r\n        }\r\n\r\n    }\r\n\r\n    saveToLocalStorage = () => {\r\n        localStorage.setItem('portfolios', JSON.stringify(this.state.portfolios));\r\n        localStorage.setItem('currentPortfolio', JSON.stringify(this.state.currentPortfolio));\r\n    }\r\n\r\n    removePortfolio = (portfolioObj) => {\r\n        const lessPortfolios = this.state.portfolios;\r\n        const key = Object.keys(lessPortfolios).find(key => lessPortfolios[key] === portfolioObj);\r\n        delete lessPortfolios[key];\r\n        this.setState({portfolios:lessPortfolios});\r\n        this.saveToLocalStorage();\r\n    }\r\n    \r\n    setCurrentPortfolio = (portfolio) => {\r\n        this.setState({ currentPortfolio: portfolio });\r\n    }\r\n\r\n    render() {\r\n        const actions = {\r\n            savePortfolio: this.savePortfolio,\r\n            setCurrentPortfolio: this.setCurrentPortfolio,\r\n            removePortfolio: this.removePortfolio,\r\n        }\r\n        return (\r\n\r\n            <div className=\"App\">\r\n                <Main\r\n                    {...actions}\r\n                    portfolios={this.state.portfolios}\r\n                    currentPortfolio={this.state.currentPortfolio}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './StyleSheets/index.css';\r\nimport App from './UI/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}